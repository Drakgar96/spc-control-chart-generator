function andersonDarlingTest(data) {
            const n = data.length;
            if (n < 8) {
                // AD test is not reliable for small sample sizes
                return { a2: null, pValue: null };
            }

            const sortedData = [...data].sort((a, b) => a - b);
            const mean = sortedData.reduce((sum, val) => sum + val, 0) / n;
            const stdDev = Math.sqrt(sortedData.map(val => (val - mean) ** 2).reduce((sum, val) => sum + val, 0) / (n - 1));

            if (stdDev === 0) {
                // Cannot perform test on constant data
                return { a2: NaN, pValue: 0 };
            }

            // A simplified normal CDF approximation
            const erf = (x) => {
                const a1 = 0.254829592, a2 = -0.284496736, a3 = 1.421413741, a4 = -1.453152027, a5 = 1.061405429;
                const p = 0.3275911;
                const sign = (x >= 0) ? 1 : -1;
                const absX = Math.abs(x);
                const t = 1.0 / (1.0 + p * absX);
                const poly = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-absX * absX);
                return sign * poly;
            };
            const simplifiedNormalCDF = (x, mu, sigma) => {
                return 0.5 * (1 + erf((x - mu) / (sigma * Math.sqrt(2))));
            };

            let a2 = 0;
            for (let i = 0; i < n; i++) {
                const f_i = simplifiedNormalCDF(sortedData[i], mean, stdDev);
                const term1 = (2 * (i + 1) - 1) * (Math.log(f_i) + Math.log(1 - simplifiedNormalCDF(sortedData[n - 1 - i], mean, stdDev)));
                a2 += term1;
            }
            a2 = -n - (a2 / n);

            // A simplified P-value calculation based on the A^2 statistic
            let pValue = 0;
            const a2Star = a2 * (1 + 4/n - 25/(n*n)); // Adjusted A^2
            if (a2Star >= 1.038) pValue = 0.001;
            else if (a2Star >= 0.916) pValue = 0.005;
            else if (a2Star >= 0.787) pValue = 0.010;
            else if (a2Star >= 0.656) pValue = 0.025;
            else if (a2Star >= 0.569) pValue = 0.050;
            else if (a2Star >= 0.505) pValue = 0.100;
            else pValue = 0.150;
            
            return { a2: a2, pValue: pValue };
        }